buildscript {
  ext {
    arrowVersion = '0.7.1'
    gradleVersionsPluginVersion = '0.17.0'
    jacksonKotlinVersion = '2.9.5'
    jasyptVersion = '1.9.2'
    javaVersion = '1.8'
    jjwtVersion = '0.9.0'
    kotlinVersion = '1.2.41'
    orikaVersion = '1.5.2'
    restAssuredVersion = '3.1.0'
    springBootVersion = '2.0.1.RELEASE'

    libs = [
            arrow_core          : "io.arrow-kt:arrow-core:${arrowVersion}",
            arrow_effects       : "io.arrow-kt:arrow-effects:${arrowVersion}",
            arrow_instances_core: "io.arrow-kt:arrow-instances-core:${arrowVersion}",
            arrow_instances_data: "io.arrow-kt:arrow-instances-data:${arrowVersion}",
            arrow_data          : "io.arrow-kt:arrow-data:${arrowVersion}",
            arrow_syntax        : "io.arrow-kt:arrow-syntax:${arrowVersion}",
            arrow_typeclasses   : "io.arrow-kt:arrow-typeclasses:${arrowVersion}",
            jackson_kotlin      : "com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonKotlinVersion}",
            jasypt              : "org.jasypt:jasypt:${jasyptVersion}",
            jjwt                : "io.jsonwebtoken:jjwt:${jjwtVersion}",
            junit_jupiter_api   : "org.junit.jupiter:junit-jupiter-api",
            junit_jupiter_engine: "org.junit.jupiter:junit-jupiter-engine",
            kotlin_reflect      : "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}",
            kotlin_std          : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}",
            orika               : "ma.glasnost.orika:orika-core:${orikaVersion}",
            reactor_test        : "io.projectreactor:reactor-test",
            restassured         : "io.rest-assured:rest-assured:${restAssuredVersion}",
            spring_boot_devtools: "org.springframework.boot:spring-boot-devtools"
    ]

    starters = [
            actuator: 'org.springframework.boot:spring-boot-starter-actuator',
            test    : 'org.springframework.boot:spring-boot-starter-test',
            webflux : 'org.springframework.boot:spring-boot-starter-webflux'
    ]
  }

  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
  }
  dependencies {
    classpath "com.github.ben-manes:gradle-versions-plugin:${gradleVersionsPluginVersion}"
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
  }
}

configure(subprojects - project(':realworld-app') - project(':realworld-infra')) { project ->
  apply plugin: 'kotlin'
  apply plugin: 'kotlin-spring'
  apply plugin: 'io.spring.dependency-management'

  dependencyManagement {
    imports {
      mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
  }

  version = '0.0.1-SNAPSHOT'

  sourceCompatibility = javaVersion
  compileKotlin {
    kotlinOptions {
      freeCompilerArgs = ["-Xjsr305=strict"]
      jvmTarget = javaVersion
    }
  }
  compileTestKotlin {
    kotlinOptions {
      freeCompilerArgs = ["-Xjsr305=strict"]
      jvmTarget = javaVersion
    }
  }

  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
  }

  configurations {
    all {
      exclude module: 'kotlin-stdlib-jdk7'
      exclude module: 'kotlin-stdlib-jre7'

      resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.jetbrains.kotlin') {
          details.useVersion "${kotlinVersion}"
          details.because 'use single kotlin version'
        }
      }
    }
  }

  test {
    useJUnitPlatform()
    outputs.upToDateWhen { false }

    testLogging {
      events 'passed', 'failed', 'skipped'
      exceptionFormat 'full'
    }
  }

  dependencies {
    compile libs.kotlin_std
    compile libs.kotlin_reflect

    compile libs.arrow_core
    compile libs.arrow_typeclasses
    compile libs.arrow_instances_core
    compile libs.arrow_instances_data
    compile libs.arrow_data
    compile libs.arrow_syntax
    compile libs.arrow_effects

    testCompile(starters.test) {
      exclude group: 'junit', module: 'junit'
    }
    testCompile libs.reactor_test

    testImplementation libs.junit_jupiter_api
    testImplementation libs.junit_jupiter_engine
  }
}

project('realworld-app:web') {
  apply plugin: 'org.springframework.boot'

  dependencies {
    compile project(':realworld-domain')
    compile project(':realworld-infra:persistence')

    compile starters.actuator
    compile starters.webflux

    compile libs.jackson_kotlin
    compile libs.orika

    testCompile libs.restassured
  }
}

project('realworld-domain') {
  dependencies {
    compile libs.jasypt
    compile libs.jjwt
  }
}

project('realworld-infra:persistence') {
  dependencies {
    compile project(':realworld-domain')
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.6'
}

apply plugin: 'com.github.ben-manes.versions'
dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'build-snapshot', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}
