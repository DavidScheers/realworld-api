buildscript {
  ext {
    arrowVersion = '0.7.3'
    flywayVersion = '5.2.1'
    gradleVersionsPluginVersion = '0.20.0'
    jacksonKotlinVersion = '2.9.7'
    jasyptVersion = '1.9.2'
    javaVersion = '1.8'
    jjwtVersion = '0.9.1'
    kotlinVersion = '1.2.71'
    ktlintVersion = '0.29.0'
    restAssuredVersion = '3.2.0'
    slugifyVersion = '2.2'
    springBootVersion = '2.0.6.RELEASE'

    libs = [
            arrow_core          : "io.arrow-kt:arrow-core:${arrowVersion}",
            arrow_effects       : "io.arrow-kt:arrow-effects:${arrowVersion}",
            arrow_instances_core: "io.arrow-kt:arrow-instances-core:${arrowVersion}",
            arrow_instances_data: "io.arrow-kt:arrow-instances-data:${arrowVersion}",
            arrow_data          : "io.arrow-kt:arrow-data:${arrowVersion}",
            arrow_syntax        : "io.arrow-kt:arrow-syntax:${arrowVersion}",
            arrow_typeclasses   : "io.arrow-kt:arrow-typeclasses:${arrowVersion}",
            jackson_kotlin      : "com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonKotlinVersion}",
            jasypt              : "org.jasypt:jasypt:${jasyptVersion}",
            jjwt                : "io.jsonwebtoken:jjwt:${jjwtVersion}",
            junit_jupiter_api   : "org.junit.jupiter:junit-jupiter-api",
            junit_jupiter_engine: "org.junit.jupiter:junit-jupiter-engine",
            kotlin_reflect      : "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}",
            kotlin_std          : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}",
            ktlint              : "com.github.shyiko:ktlint:${ktlintVersion}",
            postgresql          : "org.postgresql:postgresql",
            restassured         : "io.rest-assured:rest-assured:${restAssuredVersion}",
            slugify             : "com.github.slugify:slugify:${slugifyVersion}",
            spring_boot_devtools: "org.springframework.boot:spring-boot-devtools"
    ]

    starters = [
            actuator: 'org.springframework.boot:spring-boot-starter-actuator',
            jdbc    : 'org.springframework.boot:spring-boot-starter-jdbc',
            test    : 'org.springframework.boot:spring-boot-starter-test',
            undertow: 'org.springframework.boot:spring-boot-starter-undertow',
            web     : 'org.springframework.boot:spring-boot-starter-web',
    ]
  }

  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "com.github.ben-manes:gradle-versions-plugin:${gradleVersionsPluginVersion}"
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    classpath("gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:${flywayVersion}")
  }
}

configure(subprojects - project(':realworld-app') - project(':realworld-infra')) { project ->
  apply plugin: 'kotlin'
  apply plugin: 'kotlin-spring'
  apply plugin: 'io.spring.dependency-management'

  dependencyManagement {
    imports {
      mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
  }

  version = '0.0.1-SNAPSHOT'

  sourceCompatibility = javaVersion
  compileKotlin {
    kotlinOptions {
      freeCompilerArgs = ["-Xjsr305=strict"]
      jvmTarget = javaVersion
    }
  }
  compileTestKotlin {
    kotlinOptions {
      freeCompilerArgs = ["-Xjsr305=strict"]
      jvmTarget = javaVersion
    }
  }
  kotlin { experimental { coroutines 'enable' } }

  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
  }

  configurations {
    ktlint
    all {
      exclude module: 'kotlin-stdlib-jdk7'
      exclude module: 'kotlin-stdlib-jre7'

      resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.jetbrains.kotlin') {
          details.useVersion "${kotlinVersion}"
          details.because 'use single kotlin version'
        }
      }
    }
  }

  test {
    useJUnitPlatform()
    outputs.upToDateWhen { false }

    testLogging {
      events 'passed', 'failed', 'skipped'
      exceptionFormat 'full'
    }
  }

  dependencies {
    ktlint libs.ktlint

    compile libs.kotlin_std
    compile libs.kotlin_reflect

    compile libs.arrow_core
    compile libs.arrow_typeclasses
    compile libs.arrow_instances_core
    compile libs.arrow_instances_data
    compile libs.arrow_data
    compile libs.arrow_syntax
    compile libs.arrow_effects

    testCompile(starters.test) {
      exclude group: 'junit', module: 'junit'
    }

    testImplementation libs.junit_jupiter_api
    testImplementation libs.junit_jupiter_engine
  }

  task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
  }
  project.check.dependsOn ktlint

  task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
  }
}

project('realworld-app:web') {
  apply plugin: 'org.springframework.boot'
  apply plugin: 'org.flywaydb.flyway'

  flyway {
    url = 'jdbc:postgresql://localhost:5432/realworld'
    user = 'postgres'
    password = 'secret'
    placeholders = [
      'application_user': 'realworld'
    ]
  }

  dependencies {
    compile project(':realworld-domain')
    compile project(':realworld-infra:persistence')

    compile starters.actuator
    compile(starters.web) {
      exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
    compile starters.undertow

    compile libs.jackson_kotlin

    testCompile libs.restassured
  }
}

project('realworld-domain') {
  dependencies {
    compile libs.jasypt
    compile libs.jjwt
    compile libs.slugify
  }
}

project('realworld-infra:persistence') {
  dependencies {
    compile project(':realworld-domain')

    compile starters.jdbc
    compile libs.postgresql
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
  gradleVersion = '4.10.2'
}

apply plugin: 'com.github.ben-manes.versions'
dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'build-snapshot', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}
