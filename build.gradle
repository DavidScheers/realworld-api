plugins {
  id "com.github.ben-manes.versions" version "0.20.0" apply false
  id "org.flywaydb.flyway" version "5.2.3" apply false
  id "org.jetbrains.kotlin.jvm" version "1.3.10" apply false
  id "org.jetbrains.kotlin.plugin.spring" version  "1.3.10" apply false
  id "org.springframework.boot" version "2.1.1.RELEASE" apply false
}

ext {
  arrowVersion = "0.8.1"
  gradleVersionsPluginVersion = "0.20.0"
  jacksonKotlinVersion = "2.9.7"
  jasyptVersion = "1.9.2"
  jaxbVersion = "2.2.11"
  javaVersion = "1.8"
  jjwtVersion = "0.9.1"
  kotlinVersion = "1.3.10"
  ktlintVersion = "0.29.0"
  restAssuredVersion = "3.2.0"
  slugifyVersion = "2.2"
  springBootVersion = "2.1.1.RELEASE"

  libs = [
          arrow_core             : "io.arrow-kt:arrow-core:${arrowVersion}",
          arrow_effects          : "io.arrow-kt:arrow-effects:${arrowVersion}",
          arrow_effects_instances: "io.arrow-kt:arrow-effects-instances:${arrowVersion}",
          arrow_instances_core   : "io.arrow-kt:arrow-instances-core:${arrowVersion}",
          arrow_instances_data   : "io.arrow-kt:arrow-instances-data:${arrowVersion}",
          arrow_data             : "io.arrow-kt:arrow-data:${arrowVersion}",
          arrow_syntax           : "io.arrow-kt:arrow-syntax:${arrowVersion}",
          arrow_typeclasses      : "io.arrow-kt:arrow-typeclasses:${arrowVersion}",
          jackson_kotlin         : "com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonKotlinVersion}",
          jasypt                 : "org.jasypt:jasypt:${jasyptVersion}",
          jaxb                   : "javax.xml.bind:jaxb-api:${jaxbVersion}",
          jjwt                   : "io.jsonwebtoken:jjwt:${jjwtVersion}",
          junit_jupiter_api      : "org.junit.jupiter:junit-jupiter-api",
          junit_jupiter_engine   : "org.junit.jupiter:junit-jupiter-engine",
          kotlin_reflect         : "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}",
          kotlin_std             : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}",
          ktlint                 : "com.github.shyiko:ktlint:${ktlintVersion}",
          postgresql             : "org.postgresql:postgresql",
          restassured            : "io.rest-assured:rest-assured:${restAssuredVersion}",
          slugify                : "com.github.slugify:slugify:${slugifyVersion}",
          spring_boot_devtools   : "org.springframework.boot:spring-boot-devtools"
  ]

  starters = [
          actuator: "org.springframework.boot:spring-boot-starter-actuator",
          jdbc    : "org.springframework.boot:spring-boot-starter-jdbc",
          test    : "org.springframework.boot:spring-boot-starter-test",
          undertow: "org.springframework.boot:spring-boot-starter-undertow",
          web     : "org.springframework.boot:spring-boot-starter-web",
  ]
}

configure(subprojects - project(":realworld-app") - project(":realworld-infra")) { project ->
  apply plugin: "org.jetbrains.kotlin.jvm"
  apply plugin: "org.jetbrains.kotlin.plugin.spring"

  version = "0.0.1-SNAPSHOT"

  sourceCompatibility = javaVersion
  compileKotlin {
    kotlinOptions {
      freeCompilerArgs = ["-Xjsr305=strict", "-XXLanguage:+InlineClasses"]
      jvmTarget = javaVersion
    }
  }
  compileTestKotlin {
    kotlinOptions {
      freeCompilerArgs = ["-Xjsr305=strict", "-XXLanguage:+InlineClasses"]
      jvmTarget = javaVersion
    }
  }

  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
  }

  configurations {
    ktlint
    all {
      exclude module: "kotlin-stdlib-jdk7"
      exclude module: "kotlin-stdlib-jre7"

      resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == "org.jetbrains.kotlin") {
          details.useVersion "${kotlinVersion}"
          details.because "use single kotlin version"
        }
      }
    }
  }

  test {
    useJUnitPlatform()
    outputs.upToDateWhen { false }

    testLogging {
      events "passed", "failed", "skipped"
      exceptionFormat "full"
    }
  }

  dependencies {
    implementation(platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))

    ktlint(libs.ktlint)

    implementation(libs.kotlin_std)
    implementation(libs.kotlin_reflect)

    implementation(libs.arrow_core)
    implementation(libs.arrow_typeclasses)
    implementation(libs.arrow_instances_core)
    implementation(libs.arrow_instances_data)
    implementation(libs.arrow_data)
    implementation(libs.arrow_syntax)
    implementation(libs.arrow_effects)
    implementation(libs.arrow_effects_instances)

    runtime(libs.jaxb)

    testImplementation(starters.test) {
      exclude group: "junit", module: "junit"
    }

    testImplementation(libs.junit_jupiter_api)
    testImplementation(libs.junit_jupiter_engine)
  }

  task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
  }
  project.check.dependsOn ktlint

  task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
  }
}

project("realworld-app:web") {
  apply plugin: "org.springframework.boot"
  apply plugin: "org.flywaydb.flyway"

  flyway {
    url = "jdbc:postgresql://localhost:5432/realworld"
    user = "postgres"
    password = "secret"
    placeholders = [
      "application_user": "realworld"
    ]
  }

  dependencies {
    implementation(project(":realworld-domain"))
    implementation(project(":realworld-infra:persistence"))

    implementation(starters.actuator)
    implementation(starters.jdbc)
    implementation(starters.web) {
      exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
    implementation(starters.undertow)

    implementation(libs.jackson_kotlin)

    testImplementation(libs.restassured)
  }
}

project("realworld-domain") {
  dependencies {
    implementation(libs.jasypt)
    implementation(libs.jjwt)
    implementation(libs.slugify)
  }
}

project("realworld-infra:persistence") {
  dependencies {
    implementation(project(":realworld-domain"))

    implementation(starters.jdbc)

    implementation(libs.postgresql)
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
  gradleVersion = "5.0"
}

apply plugin: "com.github.ben-manes.versions"
dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ["alpha", "beta", "build-snapshot", "rc", "cr", "m"].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject("Release candidate")
      }
    }
  }
}
